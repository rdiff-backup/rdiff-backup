---
name: Deploy-Weekly

on:
  schedule:  # Each Sunday (0) at 22:22 UTC
    - cron: '22 22 * * 0'

# necessary for Windows
defaults:
  run:
    shell: bash

env:
  WIN_PYTHON_VERSION: 3.10.7
  WIN_LIBRSYNC_VERSION: v2.3.2

jobs:

  build-manylinux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # we could do it also as matrix but it takes longer
        #python-version: [3.10,3.9,3.8,3.7]
        #--- Build and deploy Linux wheels using manylinux containers ---
        # - build manylinux2010 x64 and i686
        # - build manylinux2014 x64
        # - build manylinux_2_28 x64
        # avoiding manylinux2014_i686 because does not provide librsync-devel
        # manylinux_2_24 is already deprecated
        many-linux: [2010_x86_64, 2010_i686, 2014_x86_64, _2_28_x86_64]
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # to have the correct version
    - name: create manylinux wheel(s) in a container
      uses: addnab/docker-run-action@v1
      with:
        image: quay.io/pypa/manylinux${{ matrix.many-linux }}
        options: -v ${{ github.workspace }}:/ws
        run: |
          if [[ ${{ matrix.many-linux }} != *64 ]]; then PRE_CMD=linux32; fi
          #py=$(echo ${{ matrix.python-version }} | tr -d .)
          plat=manylinux${{ matrix.many-linux }}
          $PRE_CMD /ws/tools/build_wheels.sh /ws ${plat} /opt/python/cp3{10,9,8,7}*/bin
    - name: Upload wheel artifacts
      uses: actions/upload-artifact@v3
      with:
        name: package-artifacts
        path: dist/*.whl
        if-no-files-found: error

  build-sdist:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # to have the correct version
    - name: Install asciidoctor to generate manpages
      run: |
        sudo apt-get --assume-yes update
        sudo apt-get --assume-yes install asciidoctor
    - name: create source dist package
      run: python setup.py sdist
    - name: Upload sdist artifact
      uses: actions/upload-artifact@v3
      with:
        name: package-artifacts
        path: dist/*.tar.gz
        if-no-files-found: error

  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x86, x64]
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # to have the correct version
    - name: Set up Python ${{ env.WIN_PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.WIN_PYTHON_VERSION }}
        architecture: ${{ matrix.arch }}
    - name: Install dependencies
      run: tools/win_provision.sh asciidoc
    - name: Build librsync
      run: tools/win_build_librsync.sh ${{ matrix.arch }} ${WIN_LIBRSYNC_VERSION}
    - name: Build rdiff-backup
      run: tools/win_build_rdiffbackup.sh ${{ matrix.arch }} ${WIN_PYTHON_VERSION}
    - name: Package rdiff-backup
      run: tools/win_package_rdiffbackup.sh ${{ matrix.arch }}
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: package-artifacts
        path: |
          dist/*.zip
          dist/*.whl
        if-no-files-found: error

  test-built-windows:
    runs-on: windows-latest
    needs: [build-windows]
    strategy:
      matrix:
        arch: [x86, x64]
    steps:
    - name: Download artifacts
      id: download
      uses: actions/download-artifact@v2
      with:
        name: package-artifacts
        path: .
    - name: Extract and test Windows binary
      run: |
        ls -la
        if [[ ${{ matrix.arch }} == *64 ]]; then bits=64; else bits=32; fi 
        7z x rdiff-backup-*.win${bits}exe.zip
        cd rdiff-backup-*-${bits}
        pwd
        ls -la
        ./rdiff-backup.exe --help
        ./rdiff-backup.exe info
        ./rdiff-backup.exe -v5 backup . ../bak${bits}
        ./rdiff-backup.exe -v5 verify ../bak${bits}
        ./rdiff-backup.exe -v5 restore ../bak${bits} to
        ls -la to/

  release-weekly:
    runs-on: ubuntu-latest
    needs: [build-manylinux, build-sdist, test-built-windows]
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # to have the correct version
    - name: force create weekly tag and push it and create release body
      run: |
        git tag -f weekly && git push -f origin weekly
        echo "This weekly release has been built and uploaded automatically." > body.myown.adoc
        echo "Feel free to use (at your own risk) and report issues." >> body.myown.adoc
        echo >> body.myown.adoc
        ./tools/get_changelog_since.sh -M >> body.myown.md
    - name: Download artifacts
      id: download
      uses: actions/download-artifact@v2
      with:
        name: package-artifacts
        path: dist
    - name: Export artifacts
      id: export
      run: echo artifact_files=${{ steps.download.outputs.download-path }}/*.* >> $GITHUB_OUTPUT
      # see https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
    - name: Create release and upload assets to GitHub
      uses: ncipollo/release-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: weekly
        # commit: master
        name: Weekly Release ${{ github.event.repository.pushed_at }}
        bodyFile: body.myown.md
        prerelease: true
        artifacts: ${{ steps.export.outputs.artifact_files }}
        allowUpdates: true
        removeArtifacts: true
