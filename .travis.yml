---
language: python

os: linux
dist: bionic

install: pip3 install --upgrade pip tox pyxattr pylibacl setuptools-scm

python:
  - 3.5
  - 3.6
  - 3.7
  - 3.8

deploy:
  provider: releases
  file_glob: true
  file: dist/*.*
  skip_cleanup: true
  draft: true
  token:
    secure: V1Ad29+3lIQB1Sxqt8RiNKwferucTIr2mJo1Ka0m8Y1GdscP0ZkvHN4Vzjb0hts+lap8cU24tJ1zq9k22bdsNmoS3/YEg7fwbQSOPCJSYbjwMQeitDc1NP3u1mp5LWiEnQ7cflalIkmWUVpwGbwPSnUQdW3JyheUm4DP6jndGHmv3sC2r4WtZDkVY44SI5OGjvOTStTLnXhVlwXMIBKzw+o9BNdmIcpRvI3UTR+C9mA2yoNE7qgpzALZ4qn7qAmTMJzcVQb22yVZqXVCF8VD72Z66GHx75aatMmsJ/2isOEap19sVYt03fY8lchsTUsdRRCAIInxUvbdfgaEoBWj8Vfv2r/vm5DgWh93amv1RkJdmAYAMTGZG/k20vd7N+sNGKCdAF0W8hj5kriGkNnSQg7dFd+NWrF3pX9XcUkT9IGzv5eT5eYeS+yzgB3YPy8qGKwF5dRkRf7Ylw68j8YOly40rAAfgEx/pcFlYrJh62LDPr5RNhKA679+9UAp0rgkiszNH327bj1i0drqeDIhJAZSXw86B8tJZI1JRBVllKNbwDc5GRFNyms4+pvKCO+lAy5Pcn0bQMUq49qxDsdnM1t2RISivWy5CdkOTNW5WYglhovOSoA8/NjcxmsOpOazCaENEvsB3AogI+LRmpZ7lUZKxjaILuVUM2rwXlKxFB0=
  on:
    tags: true
    all_branches: true
    condition: $MAKE_STEP == ?dist*

jobs:
  include:
    # Build and deploy Windows executable
    - os: windows
      language: shell
      env: MAKE_STEP=bdist_win
      before_install:
        - git clone https://github.com/pyenv-win/pyenv-win.git $HOME/.pyenv
        - export PATH="$HOME/.pyenv/pyenv-win/bin:$HOME/.pyenv/pyenv-win/shims:$PATH"
        - export pyver=3.7.5
        - export pyverbrief=${pyver:0:3}
        - pyenv install --list
        - pyenv install -q $pyver || pyenv rehash
        - pyenv global $pyver
        - pyenv rehash
        - pyenv local $pyver
        - python --version
      install:
        - pip install --upgrade tox pywin32 setuptools-scm PyInstaller
        - pyenv rehash
        - git clone -b v2.2.1 https://github.com/librsync/librsync.git $HOME/.librsync
        - export LIBRSYNC_DIR=$HOME/librsync
        - pushd $HOME/.librsync
        - cmake -DCMAKE_INSTALL_PREFIX=$LIBRSYNC_DIR -A Win32 -DBUILD_SHARED_LIBS=OFF .
        - cmake --build . --config Release
        - cmake --install . --config Release
        - popd
      script:
        - python setup.py bdist
        - vername=rdiff-backup-`python setup.py --version`
        - PyInstaller --onefile --distpath build/$vername --paths=build/lib.win32-$pyverbrief --add-data=src/rdiff_backup.egg-info/PKG-INFO\;rdiff_backup.egg-info --console build/scripts-$pyverbrief/rdiff-backup
      before_deploy:
        - cp CHANGELOG COPYING README.md docs/FAQ.md docs/examples.md docs/DEVELOP.md docs/Windows-README.md build/$vername
        - pushd build
        - 7z a -tzip ../dist/$vername.win32exe.zip $vername
        - popd
    # Build and deploy Linux wheels using manylinux Docker containers
    # avoiding manylinux2014_i686 because it does not provide librsync-devel
    - os: linux
      sudo: required
      services:
        - docker
      env: DOCKER_IMAGE=quay.io/pypa/manylinux2010_x86_64
           PLAT=manylinux2010_x86_64
           MAKE_STEP=bdist_wheel
      install:
        - docker pull $DOCKER_IMAGE
      script:
        - docker run --rm -e PLAT=$PLAT -v `pwd`:/io $DOCKER_IMAGE $PRE_CMD /io/tools/build_wheels.sh
        - ls dist/
    - os: linux
      services:
        - docker
      env: DOCKER_IMAGE=quay.io/pypa/manylinux2010_i686
          PRE_CMD=linux32
          PLAT=manylinux2010_i686
          MAKE_STEP=bdist_wheel
      install:
        - docker pull $DOCKER_IMAGE
      script:
        - docker run --rm -e PLAT=$PLAT -v `pwd`:/io $DOCKER_IMAGE $PRE_CMD /io/tools/build_wheels.sh
        - ls dist/
    - os: linux
      services:
        - docker
      env: DOCKER_IMAGE=quay.io/pypa/manylinux2014_x86_64
           PLAT=manylinux2014_x86_64
           MAKE_STEP=bdist_wheel
      install:
        - docker pull $DOCKER_IMAGE
      script:
        - docker run --rm -e PLAT=$PLAT -v `pwd`:/io $DOCKER_IMAGE $PRE_CMD /io/tools/build_wheels.sh
        - ls dist/
    - os: linux
      language: shell
      env: MAKE_STEP=bdist_deb RUN_COMMAND=
      addons:
        apt:
          packages:  # make sure these match debian/control contents
            - build-essential
            - debhelper-compat
            - dh-python
            - fakeroot
            - git-buildpackage
            - librsync-dev
            - python3-all-dev
            - python3-pylibacl
            - python3-pyxattr
            - python3-setuptools
            - python3-setuptools-scm
      install:
        - echo "No pip here"
      script:
        - make $MAKE_STEP
        - cat ../*.changes
        - mkdir -vp dist
        - cp -v ../*.* dist/
    - os: linux
      env: MAKE_STEP=sdist RUN_COMMAND=
      install:
        - echo "No pip here"
      script:
        - make $MAKE_STEP
        - ls dist/

# Only run tests (and deploy) on master and specific branches
branches:
  only:
    - master
    - /_$/  # put an underscore at the end of the branch name to force building
    - /^v\d+\.\d+\.\d+[a-z]?[0-9]?$/  # we need to whitelist tags or nothing will happen

addons:
  apt:
    packages:
      - librsync-dev
      - libacl1-dev
      - rdiff  # needed by tests in tox.ini

# Each env becomes a separate job. Add more Python versions to have a matrix.
env:
  - MAKE_STEP=test-static RUN_COMMAND= SUDO=sudo
  - MAKE_STEP=build RUN_COMMAND= SUDO=sudo
  - MAKE_STEP=test-runtime-base RUN_COMMAND= SUDO=sudo
  - MAKE_STEP=test-runtime-root RUN_COMMAND= SUDO=root  # see below
  - MAKE_STEP=test-runtime-slow RUN_COMMAND= SUDO=sudo

script:
  # We need the following line because travis runs already in a virtualenv
  # and tox as well, so that we need to use tricks to run as root
  # Especially the env is set _before_ the virtualenv is joined so that
  # the next line doesn't work in the "env" section
  - if [[ $SUDO == root ]]; then export SUDO="sudo -E env PATH=$PATH"; fi
  - make $MAKE_STEP

# Travis-CI cannot cache the plain testfiles due to permission errors, thus we
# have the .tar.gz stored in the cache dir to avoid too many re-downloads.
cache:
  directories:
    - $HOME/build/rdiff-backup/cache
# Runs in path /home/travis/build/rdiff-backup/rdiff-backup (git repo work directory)
# One level up is an empty directory that can be used for artifacts, cache etc.
